When would you want to use a remote repository rather than keeping all your work
local?

    - When you want to share your work with others - this is useful when you are opening your software to public
    while at the same time allowing them to look at the source code to suggest changes. Or when you are working on a 
    project with a team you can share the code with them by using a remote repository.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    - Because if we stay updated automatically then there might be changes made in the code that we don’t want right now but they will become part of our local repository. There  might also be merge conflicts. So, it is better to manually pull when you are ready and committed with all the local changes.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    - Branch: Making a new named series of commits on your local repository (other than the master) to experiment with a new feature, etc.
      Clone: Make an exact replica of a local repository or a remote repository to your computer - automatically marks the original repository as remote with the name “origin”
      Fork: Make an exact replica of a Github repository to your GitHub account - does not mark the original repository as “origin”

What is the benefit of having a copy of the last known state of the remote
stored locally?

    - Having a local copy helps because we can use it to help determine when there is a merge conflict e.g., when a piece of code has been modified by two collaborators. When we pull changes from the remote repository then they first come to the local copy and then get merged with our local repository.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    - Using email probably - sending code files through email/google drive. It would be very hard to keep track of all changes made in the files

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    - When you are working on an experimental feature that you currently don’t want to make part of the main work then its good to use a separate branch.
